plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

def changelogFile = file('changelog.txt')

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}

dependencies {
    constraints {
        implementation('org.apache.logging.log4j:log4j-core') {
            version {
                strictly('[2.17, 3[')
                prefer('2.17.1')
            }
            because('CVE-2021-44228, CVE-2021-45046, CVE-2021-45105: Log4j vulnerable to remote code execution and other critical security vulnerabilities')
        }
    }
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //Gecklib
    modImplementation 'software.bernie.geckolib:geckolib-fabric-1.19.3:4.0.4'
}

processResources {
    inputs.property 'version', project.version
    duplicatesStrategy = 'include'

    from(sourceSets.main.resources.srcDirs) {
        include 'fabric.mod.json'
        expand 'version': project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'fabric.mod.json'
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
tasks.register('sourcesJar', Jar) {
    dependsOn classes
    classifier = 'sources'
    from sourceSets.main.allSource
}

jar {
    from 'LICENSE'
}

curseforge {
    //Set environment variable for api key if not set below.
    def key = System.getenv('CURSE_API_KEY')
    apiKey = key == null ? '' : key
    project {
        id = project.curseforge
        changelog = changelogFile
        releaseType = 'release'
        addGameVersion project.minecraft_version
        mainArtifact(remapJar) {
            relations {
                requiredDependency 'fabric-api' // fabric-api is required
            }
        }
        afterEvaluate {
            mainArtifact(remapJar)
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

modrinth {
    //Set environment variable for api key if not set below.
    def key = System.getenv('MODRINTH_API_KEY')
    token = key == null ? '' : key
    projectId = project.modrinth.toString()
    versionType = 'release'
    uploadFile = remapJar
    changelog = changelogFile.getText()
    gameVersions = [project.minecraft_version.toString()]
    loaders = ['fabric']
    dependencies {
        required.project 'fabric-api'
    }
}

//Update the changelog file with correct project version number.
//To change project version number see mod_version in gradle.properties
//NOTE: this will replace the very first line of changelog.txt
tasks.register('addVersionToChangeLog') {
    doLast {
        def firstLine = '[Update ' + version + ']'
        def remainingContent = changelogFile.readLines().drop(1).join(System.lineSeparator())
        changelogFile.write(firstLine + System.lineSeparator() + remainingContent)
    }
}

beforeEvaluate {
    tasks.configureEach { Task task ->
        if (task.name == 'modrinth' || task.name == 'curseforge' + project.curseforge) {
            task.dependsOn addVersionToChangeLog
        }
    }
}


// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        mavenLocal()
    }
}
